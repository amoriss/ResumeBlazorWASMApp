@page "/all-resumes"
@using ResumeBlazorWASMApp.Services
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using System.Text.Json
@using UglyToad.PdfPig
@using ResumeBlazorWASMApp.Models
@using UglyToad.PdfPig.Content
@inject CandidateService CandidateService


<header>
    <h3>All Resumes</h3>
</header>
<section class="filter-section">
    <fieldset>
        <legend>First Name</legend>
        <InputText @bind-Value="_filterFirstName" placeholder="Enter first name"></InputText>
        <button class="submit-button" @onclick="FilterCandidatesByFirstName">Filter</button>
    </fieldset>

    <fieldset>
        <legend>Last Name</legend>
        <InputText @bind-Value="_filterLastName" placeholder="Enter last name"></InputText>
        <button class="submit-button" @onclick="FilterCandidatesByLastName">Filter</button>
    </fieldset>

    <fieldset>
        <legend>Status Filters</legend>
        <button class="submit-button" @onclick="FilterAllFavorites">See all Favorites</button>
        <button class="submit-button" @onclick="NoFavoriteFilter">See all Eligible Candidates</button>
    </fieldset>
    <fieldset>
        <legend>Date Filters</legend>
        <p class="date-range-note">Select a date range to filter candidates by date resume submitted:</p>
        <label style="display: inline;" for="start-date">Start Date</label>
        <InputDate @bind-Value="_filterStartDate" min="2024-01-01" max="2024-12-31">Start Date</InputDate>
        <label style="display: inline;" for="end-date">End Date</label>
        <InputDate @bind-Value="_filterEndDate" min="2024-01-01" max="2024-12-31">End Date</InputDate>
        <button class="submit-button" @onclick="() => FilterByDate(_filterStartDate, _filterEndDate)">Filter By Date</button>
        <button class="submit-button" @onclick="ResetAllFilters">Reset all Filters</button>
    </fieldset>
</section>



@if (_eligibleCandidates == null || !_eligibleCandidates.Any())
{
    <p>No eligible candidates found.</p>
}
else
{
    @foreach (var candidate in _filteredCandidates)
    {
        <article class="candidate-card">
            <span class="date-submitted">Date Submitted: @candidate.DateResumeSubmitted.ToString("MMMM dd, yyyy")</span>
            <h5>@candidate.FirstName @candidate.LastName</h5>
            <p>@candidate.Email</p>

            <div class="button-container">
                <button class="submit-button" @onclick="() => DeleteEligibleCandidate(candidate)">Delete</button>
                <button class="submit-button" @onclick="() => ViewResume(candidate)">ViewResume</button>
                @* <button class="submit-button" @onclick="() => ToggleFavorite(candidate)">Favorite</button> *@

                <button class="favorite-button" @onclick="() => ToggleFavorite(candidate)" title="Favorite">
                   @*  <i class="fas fa-star" style="colo(r: @(candidate.IsFavorited ? "gold" : "grey")"></i>Favorite *@
                   <span class="material-icons @(candidate.IsFavorited? "gold-icon": "grey-icon")">star</span>
                </button>
            </div>
            @if (candidate.IsResumeVisible)
            {
                <iframe src="data:application/pdf;base64,@_candidate.PdfResume" width="600" height="400" style="border: none;"></iframe>
            }
            @* @if (candidate.IsFavorited)
            {
                <span class="material-icons @(candidate.IsFavorited? "gold-icon": "grey-icon")">star</span>
                <span class="success-box">Is Favorite</span>
            } *@

        </article>
    }
}

@code {
    private string? _resumeText;
    private BackEndSkills _backEndSkills = new BackEndSkills();
    private FrontEndSkills _frontEndSkills = new FrontEndSkills();
    private bool _pdfScanned;
    private readonly Candidate _candidate = new Candidate();
    private List<Candidate>? _eligibleCandidates = CandidateService.EligibleCandidates;
    private bool _showThankYouMessage;
    private bool _isLoading;
    private string? _filterFirstName;
    private string? _filterLastName;
    private DateTime? _filterStartDate;
    private DateTime? _filterEndDate;
    private bool _filterFavorites;
    private List<Candidate> _filteredCandidates = new List<Candidate>();
    private string? _uploadErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        // _resumeText = await LocalStorage.GetItemAsync<string>("storedPdf");
        var storedCandidates = await LocalStorage.GetItemAsync<List<Candidate>>("eligibleCandidates") ?? new List<Candidate>();
        string json = JsonSerializer.Serialize(storedCandidates);
        Console.WriteLine($"Stored candidates JSON: {json}");
        CandidateService.LoadEligibleCandidates(storedCandidates);
        _eligibleCandidates = Services.CandidateService.GetAllEligibleCandidates();
        //_eligibleCandidates = storedCandidates;
        // _candidate.PdfResume = await RetrieveFromLocalStorage();
        Console.WriteLine("Loaded Candidates:");
        foreach (var item in _eligibleCandidates)
        {
            Console.WriteLine(item.FirstName);
            Console.WriteLine(item.LastName);
        }
        Console.WriteLine($"Number of eligible candidates: {Services.CandidateService.EligibleCandidates.Count}");
        _filteredCandidates = _eligibleCandidates.ToList();
    }

    private async Task DeleteEligibleCandidate(Candidate candidateToDelete)
    {
        //_eligibleCandidates = await LocalStorage.GetItemAsync<List<Candidate>>("eligibleCandidates");
        if (CandidateService.EligibleCandidates.Count > 0)
        {
            //_eligibleCandidates.Remove(candidateToDelete);
            CandidateService.DeleteEligibleCandidate(candidateToDelete);
        }

        await LocalStorage.SetItemAsync("eligibleCandidates", Services.CandidateService.EligibleCandidates);
        // _eligibleCandidates = await LocalStorage.GetItemAsync<List<Candidate>>("eligibleCandidates") ?? new List<Candidate>();
    }

    private void ViewResume(Candidate candidate)
    {
        candidate.IsResumeVisible = !candidate.IsResumeVisible;
    }

    private async Task ToggleFavorite(Candidate candidate)
    {
        candidate.IsFavorited = !candidate.IsFavorited;
        Console.WriteLine($"{candidate.FirstName} {candidate.LastName}");
        Console.WriteLine($"{candidate.IsFavorited}");
    }

    private void FilterCandidatesByFirstName()
    {
        Console.WriteLine($"Filtering by first name {_filterFirstName}");
        Console.WriteLine("---------------");

        Console.WriteLine("All eligible candidates: ");
        foreach (var candidate in _eligibleCandidates)
        {
            Console.WriteLine(candidate.FirstName);
            Console.WriteLine(candidate.LastName);
        }
        if (string.IsNullOrEmpty(_filterFirstName))
        {
            _filteredCandidates = _eligibleCandidates;
        }

        _filteredCandidates = _eligibleCandidates.Where(can => can.FirstName.ToLower().Contains(_filterFirstName.ToLower())).ToList();
        StateHasChanged();
        Console.WriteLine("Filtered Candidates: ");
        foreach (var item in _filteredCandidates)
        {
            Console.WriteLine(item.FirstName);
            Console.WriteLine(item.LastName);
        }
    }

    private void FilterCandidatesByLastName()
    {
        Console.WriteLine($"Filtering by last name {_filterLastName}");
        if (string.IsNullOrEmpty(_filterLastName))
        {
            _filteredCandidates = _eligibleCandidates;
        }

        _filteredCandidates = _eligibleCandidates.Where(can => can.LastName.ToLower().Contains(_filterLastName.ToLower())).ToList();
    }

    private void FilterAllFavorites()
    {
        _filterFavorites = !_filterFavorites;
        if (!_filterFavorites)
        {
            _filteredCandidates = _eligibleCandidates;
        }

        _filteredCandidates = _eligibleCandidates.Where(can => can.IsFavorited).ToList();
        StateHasChanged();
    }

    private void FilterByDate(DateTime? startDate, DateTime? endDate)
    {
        _filteredCandidates = _eligibleCandidates.Where(can => can.DateResumeSubmitted >= startDate && can.DateResumeSubmitted <= endDate).ToList();
    }

    private void ToggleFavoriteList()
    {
        _filterFavorites = !_filterFavorites;
    }

    private void NoFavoriteFilter()
    {
        _filteredCandidates = _eligibleCandidates;
        _filterFavorites = false;
    }

    private void ResetAllFilters()
    {
        _filterFirstName = string.Empty;
        _filterLastName = string.Empty;
        _filterFavorites = false;
        _filteredCandidates = _eligibleCandidates;
    }

}