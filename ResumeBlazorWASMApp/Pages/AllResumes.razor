@page "/all-resumes"
@using ResumeBlazorWASMApp.Services
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using UglyToad.PdfPig
@using ResumeBlazorWASMApp.Models
@using UglyToad.PdfPig.Content
@inject CandidateService CandidateService

<h3>Filter Candidates</h3>
<div class="filter-container">
    <InputText @bind-Value="_filterFirstName" placeholder="Enter first name"></InputText>
    <button class="submit-button" @onclick="FilterCandidatesByFirstName">Filter</button>
    <InputText @bind-Value="_filterLastName" placeholder="Enter last name"></InputText>
    <button class="submit-button" @onclick="FilterCandidatesByLastName">Filter</button>
    @* <InputCheckbox @bind-Value="_filterFavorites"></InputCheckbox> *@
    @* <button @onclick="FilterAllFavorites">See all Favorites</button> *@
    <Button type="button" class="submit-button" @onclick="FilterAllFavorites">See all Favorites</Button>
    <Button type="button" class="submit-button" @onclick="NoFavoriteFilter">See all Eligible Candidates</Button>
    <Button type="button" class="submit-button" @onclick="ResetAllFilters">Reset all Filters</Button>
</div>
<h3>All Resumes</h3>

@if (_eligibleCandidates == null || !_eligibleCandidates.Any())
{
    <li>No eligible candidates found.</li>
}
else
{
    @foreach (var candidate in _filteredCandidates)
    {
        <div class="candidate-card">
            <li>@candidate.FirstName @candidate.LastName</li>
            <li>@candidate.Email</li>
            <li>Date Submitted: @candidate.DateResumeSubmitted</li>
            <div class="button-container">
                <Button type="button" class="submit-button" @onclick="() => DeleteEligibleCandidate(candidate)">Delete</Button>
                <Button type="button" class="submit-button" @onclick="() => ViewResume(candidate)">ViewResume</Button>
                <Button type="button" class="submit-button" @onclick="() => ToggleFavorite(candidate)">Favorite</Button>
            </div>
            @if (candidate.IsResumeVisible)
            {
                @* <iframe src="data:application/pdf;base64,@candidate.PdfResume" width="600" height="400"></iframe> *@
                <iframe src="data:application/pdf;base64,@_candidate.PdfResume" width="600" height="400" style="border: none;"></iframe>
                //<iframe src="data:application/pdf;base64,@candidate.PdfResume" width="100%" height="600px"></iframe>
            }
            @if (candidate.IsFavorited)
            {
                <li class="success-box">Is Favorite</li>
            }

        </div>
    }
}

@code {
    private string? _resumeText;
    private BackEndSkills _backEndSkills = new BackEndSkills();
    private FrontEndSkills _frontEndSkills = new FrontEndSkills();
    private bool _pdfScanned;
    private readonly Candidate _candidate = new Candidate();
    private List<Candidate>? _eligibleCandidates = CandidateService.EligibleCandidates;
    private bool _showThankYouMessage;
    private bool _isLoading;
    private string? _filterFirstName;
    private string? _filterLastName;
    private bool _filterFavorites;
    private List<Candidate> _filteredCandidates = new List<Candidate>();
    private string? _uploadErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        // _resumeText = await LocalStorage.GetItemAsync<string>("storedPdf");
        var storedCandidates = await LocalStorage.GetItemAsync<List<Candidate>>("eligibleCandidates") ?? new List<Candidate>();
        CandidateService.LoadEligibleCandidates(storedCandidates);
        _eligibleCandidates = Services.CandidateService.EligibleCandidates;
        //_eligibleCandidates = storedCandidates;
        // _candidate.PdfResume = await RetrieveFromLocalStorage();
        _filteredCandidates = _eligibleCandidates;
    }

    private async Task DeleteEligibleCandidate(Candidate candidateToDelete)
    {
        //_eligibleCandidates = await LocalStorage.GetItemAsync<List<Candidate>>("eligibleCandidates");
        if (CandidateService.EligibleCandidates.Count > 0)
        {
            //_eligibleCandidates.Remove(candidateToDelete);
            CandidateService.DeleteEligibleCandidate(candidateToDelete);
        }

        await LocalStorage.SetItemAsync("eligibleCandidates", Services.CandidateService.EligibleCandidates);
        // _eligibleCandidates = await LocalStorage.GetItemAsync<List<Candidate>>("eligibleCandidates") ?? new List<Candidate>();
    }

    private void ViewResume(Candidate candidate)
    {
        candidate.IsResumeVisible = !candidate.IsResumeVisible;
    }

    private async Task ToggleFavorite(Candidate candidate)
    {
        candidate.IsFavorited = !candidate.IsFavorited;
        Console.WriteLine($"{candidate.FirstName} {candidate.LastName}");
        Console.WriteLine($"{candidate.IsFavorited}");
    }

    private void FilterCandidatesByFirstName()
    {
        Console.WriteLine($"Filtering by first name {_filterFirstName}");
        if (string.IsNullOrEmpty(_filterFirstName))
        {
            _filteredCandidates = _eligibleCandidates;
        }

        _filteredCandidates = _eligibleCandidates.Where(can => can.FirstName.Contains(_filterFirstName.ToLower())).ToList();
    }

    private void FilterCandidatesByLastName()
    {
        Console.WriteLine($"Filtering by first name {_filterLastName}");
        if (string.IsNullOrEmpty(_filterLastName))
        {
            _filteredCandidates = _eligibleCandidates;
        }

        _filteredCandidates = _eligibleCandidates.Where(can => can.LastName.Contains(_filterLastName.ToLower())).ToList();
    }

    private void FilterAllFavorites()
    {
        _filterFavorites = !_filterFavorites;
        if (!_filterFavorites)
        {
            _filteredCandidates = _eligibleCandidates;
        }

        _filteredCandidates = _eligibleCandidates.Where(can => can.IsFavorited).ToList();
        StateHasChanged();
    }

    private void ToggleFavoriteList()
    {
        _filterFavorites = !_filterFavorites;
    }

    private void NoFavoriteFilter()
    {
        _filteredCandidates = _eligibleCandidates;
        _filterFavorites = false;
    }

    private void ResetAllFilters()
    {
        _filterFirstName = string.Empty;
        _filterLastName = string.Empty;
        _filterFavorites = false;
        _filteredCandidates = _eligibleCandidates;
    }

}