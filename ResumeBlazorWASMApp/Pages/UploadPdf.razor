@page "/upload-pdf"
@using UglyToad.PdfPig
@using UglyToad.PdfPig.Content
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3>Upload PDF</h3>
<button @onclick="ReadPdf">Read PDF</button>
@* <button @onclick="UploadPdf">Upload PDF</button> *@


@* <p>@_pdfText</p> *@
<iframe src="data:application/pdf;base64,@_pdfText" width="100%" height="600px"></iframe>

@code {
    private string? _pdfText;
    private string? _pdfBase64;

    protected override async Task OnInitializedAsync()
    {
        _pdfText = await RetrieveFromLocalStorage();
    }


    private async Task ReadPdf()
    {
        var response = await Http.GetAsync("Data/FakeResume.pdf");

        if (response.IsSuccessStatusCode)
        {
            //read PDF into memory stream
            var stream = await response.Content.ReadAsStreamAsync();
            var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            
            //convert byte array to Base64 string
            byte[] pdfBytes = memoryStream.ToArray();
            string base64String = Convert.ToBase64String(pdfBytes);

            //store in local storage
            await LocalStorage.SetItemAsStringAsync("storedPdf", base64String);

            _pdfText = base64String;
            // //read PDF text
            // memoryStream.Position = 0; //read from beginning of the stream
            // var document = PdfDocument.Open(memoryStream);
            //
            // foreach (Page page in document.GetPages())
            // {
            //     _pdfText += page.Text.ToLower();
            // }
        }
        else
        {
            _pdfText = "Error reading PDF document";
        }
    }

    private async Task<string?> RetrieveFromLocalStorage()
    {
        return await LocalStorage.GetItemAsync<string>("storedPdf");
    }


}