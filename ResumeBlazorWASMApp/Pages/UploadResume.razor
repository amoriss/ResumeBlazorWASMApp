@page "/upload-resume"
@using UglyToad.PdfPig
@using UglyToad.PdfPig.Content
@using System.Net
@using Microsoft.AspNetCore.Components.Forms;
@using ResumeBlazorWASMApp.Models
@using ResumeBlazorWASMApp.Services
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


@if (!_pdfScanned)
{
    <h3 style="text-align: center">Candidate Form</h3>
}
<div class="form-container">
<EditForm Model="_candidate" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        <label>First Name:</label>
        <InputText @bind-Value="_candidate.FirstName" required/>
    </div>
    <div class="form-group">
        <label>Last Name:</label>
        <InputText @bind-Value="_candidate.LastName" required/>
    </div>
    <div class="form-group">
        <label>Email:</label>
        <InputText @bind-Value="_candidate.Email" required/>
    </div>

    <div>
        <label>Upload Resume PDF:</label>
        <InputFile OnChange="LoadFile"></InputFile>
    </div>
    <button type="submit" class="submit-button">Submit</button>
</EditForm>
</div>

@* @if (!string.IsNullOrEmpty(_resumeText)) *@
@* { *@
@*     <p>@_resumeText</p> *@
@* } *@

@if (_pdfScanned)
{
    <div class="skills-container">
        <div class="back-end-skills">
            <h2>Back-End Skills: </h2>
            @if (_backEndSkills.UsesAspnet)
            {
                <p>ASP.NET </p>
            }

            @if (_backEndSkills.UsesCSharp)
            {
                <p>C#</p>
            }

            @if (_backEndSkills.UsesVisualStudio)
            {
                <p>Visual Studio</p>
            }

            @if (_backEndSkills.UsesSql)
            {
                <p>SQL</p>
            }
        </div>

        <div class="front-end-skills">
            <h2>Front-End Skills: </h2>

            @if (_frontEndSkills.UsesReact)
            {
                <p>React</p>
            }

            @if (_frontEndSkills.UsesJavaScript)
            {
                <p>JavaScript</p>
            }

            @if (_frontEndSkills.UsesCss)
            {
                <p>CSS</p>
            }
        </div>


        @if (_backEndSkills is { UsesAspnet: true, UsesCSharp: true, UsesSql: true } && _frontEndSkills.UsesReact)
        {
            <div class="success-box">
                <h2>Candidate is eligible</h2>
            </div>
            @* <Alert Color="Color.Success"> *@
            @*     <h4>This candidate is eligible</h4> *@
            @* </Alert> *@
        }
        <h3>Would you like to submit another candidate?</h3>
        <button @onclick="ClearForm">Yes</button>
    </div>
}

<h3>All Eligible Candidates:</h3>
<ul>

    @if (eligibleCandidates == null || !eligibleCandidates.Any())
    {
        <li>No eligible candidates found.</li>
    }
    else
    {
        @foreach (var candidate in eligibleCandidates)
        {
            <li>@candidate.FirstName @candidate.LastName | Email: @candidate.Email</li>
            <Button type="button" @onclick="() => DeleteEligibleCandidate(candidate)">Delete</Button>
        }
    }

</ul>

@code {
    private string? _resumeText;
    private BackEndSkills _backEndSkills = new BackEndSkills();
    private FrontEndSkills _frontEndSkills = new FrontEndSkills();
    private bool _pdfScanned;
    private readonly Candidate _candidate = new Candidate();
    private List<Candidate>? eligibleCandidates = new List<Candidate>();

    protected override async Task OnInitializedAsync()
    {
        _resumeText = await LocalStorage.GetItemAsync<string>("storedPdf");
        eligibleCandidates = await LocalStorage.GetItemAsync<List<Candidate>>("eligibleCandidates") ?? new List<Candidate>();
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File; //getting file
        byte[] buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        _resumeText = await ReadPdfText(buffer);
    }

    private async Task ScanResume()
    {
        SkillsFinder.FindBackEndSkillsFromResume(_resumeText, _backEndSkills);
        SkillsFinder.FindFrontEndSkillsFromResume(_resumeText, _frontEndSkills);

        _pdfScanned = true;
        /////storing PDF to local storage as Base64 string
        // string base64Pdf = Convert.ToBase64String(buffer);
        // await LocalStorage.SetItemAsStringAsync("storedPdf", base64Pdf);

        await LocalStorage.SetItemAsStringAsync("storedPdf", _resumeText);
    }

    private async Task<string> ReadPdfText(byte[] pdfData)
    {
        try
        {
            using (MemoryStream stream = new MemoryStream(pdfData))
            {
                using (PdfDocument document = PdfDocument.Open(stream))
                {
                    string pageText = string.Empty;
                    foreach (Page page in document.GetPages())
                    {
                        pageText += page.Text.ToLower();
                    }

                    return pageText;
                }
            }
        }
        catch (Exception e)
        {
            return $"{e.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        await AddEligibleCandidate();
        await ScanResume();
        eligibleCandidates = await LocalStorage.GetItemAsync<List<Candidate>>("eligibleCandidates") ?? new List<Candidate>();
    }

    private async Task AddEligibleCandidate()
    {
        var candidates = await LocalStorage.GetItemAsync<List<Candidate>>("eligibleCandidates") ?? new List<Candidate>();
        candidates.Add(_candidate);
        await LocalStorage.SetItemAsync("eligibleCandidates", candidates);
    }

    private async Task DeleteEligibleCandidate(Candidate candidateToDelete)
    {
        var candidates = await LocalStorage.GetItemAsync<List<Candidate>>("eligibleCandidates");
        if (candidates != null)
        {
            candidates.Remove(candidateToDelete);
        }
        await LocalStorage.SetItemAsync("eligibleCandidates", candidates);
        eligibleCandidates = await LocalStorage.GetItemAsync<List<Candidate>>("eligibleCandidates") ?? new List<Candidate>();
    }

    private Task ClearForm()
    {
        _candidate.FirstName = string.Empty;
        _candidate.LastName = string.Empty;
        _candidate.Email = string.Empty;
        _backEndSkills = new BackEndSkills();
        _frontEndSkills = new FrontEndSkills();
        _pdfScanned = false;
        _resumeText = string.Empty;
        return Task.CompletedTask;
    }

}

