@page "/upload-resume"
@using System.Text.Json
@using UglyToad.PdfPig
@using UglyToad.PdfPig.Content
@using System.Net
@using Microsoft.AspNetCore.Components.Forms;
@using ResumeBlazorWASMApp.Models
@using ResumeBlazorWASMApp.Services
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject CandidateService CandidateService


@if (!_pdfScanned)
{
    <h3 style="text-align: center">Candidate Form</h3>
}
<div class="form-container">
    <EditForm Model="_candidate" OnSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label>First Name:</label>
            <InputText @bind-Value="_candidate.FirstName" required />
        </div>
        <div class="form-group">
            <label>Last Name:</label>
            <InputText @bind-Value="_candidate.LastName" required />
        </div>
        <div class="form-group">
            <label>Email:</label>
            <InputText @bind-Value="_candidate.Email" required />
        </div>

        <div>
            <label>Upload Resume PDF:</label>
            <InputFile OnChange="LoadFile" accept=".pdf"></InputFile>
            @if (_isLoading)
            {
                <h2>Document is Loading</h2>
            }
            @if (!string.IsNullOrEmpty(_uploadErrorMessage))
            {
                <h2>
                    <em class="red-box">@_uploadErrorMessage</em>
                </h2>
            }
        </div>
        <button type="submit" class="submit-button">Submit</button>
    </EditForm>
</div>


@if (_pdfScanned)
{
    <div class="skills-container">
        <div class="back-end-skills">
            <h2>Back-End Skills: </h2>
            @if (_backEndSkills.UsesAspnet)
            {
                <p>ASP.NET </p>
            }

            @if (_backEndSkills.UsesCSharp)
            {
                <p>C#</p>
            }

            @if (_backEndSkills.UsesVisualStudio)
            {
                <p>Visual Studio</p>
            }

            @if (_backEndSkills.UsesSql)
            {
                <p>SQL</p>
            }
        </div>

        <div class="front-end-skills">
            <h2>Front-End Skills: </h2>

            @if (_frontEndSkills.UsesReact)
            {
                <p>React</p>
            }

            @if (_frontEndSkills.UsesJavaScript)
            {
                <p>JavaScript</p>
            }

            @if (_frontEndSkills.UsesCss)
            {
                <p>CSS</p>
            }
        </div>


        @if (_backEndSkills is { UsesAspnet: true, UsesCSharp: true, UsesSql: true } && _frontEndSkills.UsesReact)
        {
            <div class="success-box">
                <h2>Candidate is eligible</h2>
            </div>
        }
        else 
        {
            <div class="red-box">
                <h2>Candidate is not eligible</h2>
            </div>
        }
        <h3>Would you like to submit another candidate?</h3>
        <button class="submit-button" @onclick="ClearFormYes">Yes</button>
        <button class="submit-button" @onclick="ClearFormNo">No</button>
        @if (_showThankYouMessage)
        {
            <h2>
                <em>Thank you</em>
            </h2>
        }
    </div>
}


@code {
    private string? _resumeText;
    private BackEndSkills _backEndSkills = new BackEndSkills();
    private FrontEndSkills _frontEndSkills = new FrontEndSkills();
    private bool _pdfScanned;
    private readonly Candidate _candidate = new Candidate();
    private List<Candidate>? _eligibleCandidates = CandidateService.EligibleCandidates;
    private bool _showThankYouMessage;
    private bool _isLoading;
    private string? _filterFirstName;
    private string? _filterLastName;
    private bool _filterFavorites;
    private List<Candidate> _filteredCandidates = new List<Candidate>();
    private string? _uploadErrorMessage;

    protected override async Task OnInitializedAsync()
    {        
        var storedCandidates = await LocalStorage.GetItemAsync<List<Candidate>>("eligibleCandidates") ?? new List<Candidate>();
        string json = JsonSerializer.Serialize(storedCandidates);
        Console.WriteLine($"Stored candidates JSON: {json}");
        CandidateService.LoadEligibleCandidates(storedCandidates);

        _eligibleCandidates = Services.CandidateService.GetAllEligibleCandidates();
        Console.WriteLine("Loaded Candidates:");
        foreach (var item in _eligibleCandidates)
        {
            Console.WriteLine($"{item.FirstName} {item.LastName}");
        }
        Console.WriteLine($"Number of eligible candidates: {Services.CandidateService.EligibleCandidates.Count}");
        _filteredCandidates = _eligibleCandidates.ToList();
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File; //getting file
        if (file.Name.EndsWith(".pdf"))
        {
            _isLoading = true;
            try
            {
                //read PDF into memory stream
                var memoryStream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(memoryStream);

                //convert PDF to Base64
                byte[] pdfBytes = memoryStream.ToArray();
                string base64String = Convert.ToBase64String(pdfBytes);
                _isLoading = false;
                _candidate.PdfUploaded = true;
                _candidate.PdfResume = base64String;

                _resumeText = await ReadPdfText(pdfBytes);
                await LocalStorage.SetItemAsStringAsync("storedPdf", _candidate.PdfResume);

            }
            catch (Exception ex)
            {

                _uploadErrorMessage = $"An error occurred while uploading the file: {ex.Message}";
            }
            finally
            {
                _isLoading = false;
            }

        }
        else
        {
            _uploadErrorMessage = "Please upload valid PDF file";
            _candidate.PdfUploaded = false;
        }
    }

    private async Task ScanResume()
    {
        SkillsFinder.FindBackEndSkillsFromResume(_resumeText, _backEndSkills);
        SkillsFinder.FindFrontEndSkillsFromResume(_resumeText, _frontEndSkills);
        _candidate.BackEndSkills = _backEndSkills;
        _candidate.FrontEndSkills = _frontEndSkills;

        _pdfScanned = true;
        
    }

    private async Task<string> ReadPdfText(byte[] pdfData)
    {
        try
        {
            using (MemoryStream stream = new MemoryStream(pdfData))
            {
                using (PdfDocument document = PdfDocument.Open(stream))
                {
                    string pageText = string.Empty;
                    foreach (Page page in document.GetPages())
                    {
                        pageText += page.Text.ToLower();
                    }

                    return pageText;
                }
            }
        }
        catch (Exception e)
        {
            return $"{e.Message}";
        }
    }

    private async Task HandleSubmit()
    {
        @if (!_candidate.PdfUploaded)
        {
            _uploadErrorMessage = "Please upload a valid PDF file";
            return;
        }

        Console.WriteLine(_uploadErrorMessage);
        Console.WriteLine($"First Name: {_candidate.FirstName} {_candidate.LastName}");
        _candidate.DateResumeSubmitted = DateTime.Now;
        await ScanResume();       
        CandidateService.AddEligibleCandidate(_candidate, LocalStorage);       
        _eligibleCandidates = Services.CandidateService.GetAllEligibleCandidates();
        _uploadErrorMessage = string.Empty;
    }

    private async Task AddEligibleCandidate()
    {        
        @if (_candidate.BackEndSkills.UsesAspnet && _candidate is { BackEndSkills: { UsesCSharp: true, UsesSql: true }, FrontEndSkills.UsesReact: true })
        {        
            CandidateService.AddEligibleCandidate(_candidate, LocalStorage);
        }
       
        await LocalStorage.SetItemAsync("eligibleCandidates", CandidateService.EligibleCandidates);
    }

    private async Task DeleteEligibleCandidate(Candidate candidateToDelete)
    {        
        if (CandidateService.EligibleCandidates.Count > 0)
        {
            CandidateService.DeleteEligibleCandidate(candidateToDelete);
        }

        await LocalStorage.SetItemAsync("eligibleCandidates", Services.CandidateService.EligibleCandidates);       
    }

    private Task ClearFormYes()
    {
        _candidate.FirstName = string.Empty;
        _candidate.LastName = string.Empty;
        _candidate.Email = string.Empty;
        _backEndSkills = new BackEndSkills();
        _frontEndSkills = new FrontEndSkills();
        _pdfScanned = false;
        _resumeText = string.Empty;
        _showThankYouMessage = false; //don't show thank you message
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task ClearFormNo()
    {
        _candidate.FirstName = string.Empty;
        _candidate.LastName = string.Empty;
        _candidate.Email = string.Empty;
        _backEndSkills = new BackEndSkills();
        _frontEndSkills = new FrontEndSkills();
        _pdfScanned = false;
        _resumeText = string.Empty;
        _showThankYouMessage = true; //show thank you message
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void ViewResume(Candidate candidate)
    {
        candidate.IsResumeVisible = !candidate.IsResumeVisible;
    }

    private async Task ToggleFavorite(Candidate candidate)
    {
        candidate.IsFavorited = !candidate.IsFavorited;
        Console.WriteLine($"{candidate.FirstName} {candidate.LastName}");
        Console.WriteLine($"{candidate.IsFavorited}");
        await LocalStorage.SetItemAsync("eligibleCandidates", CandidateService.EligibleCandidates);
    }

    private void FilterCandidatesByFirstName()
    {
        Console.WriteLine($"Searching for: {_filterFirstName}");
        if (string.IsNullOrEmpty(_filterFirstName))
        {
            _filteredCandidates = _eligibleCandidates.ToList();
        }
        Console.WriteLine("All eligible candidates");
        foreach (var item in _eligibleCandidates)
        {
            Console.WriteLine($"{item.FirstName} {item.LastName}");

        }

        _filteredCandidates = _eligibleCandidates.Where(can => can.FirstName.Contains(_filterFirstName.ToLower())).ToList();

        Console.WriteLine("Filtered candidates");
        foreach (var item in _filteredCandidates)
        {
            Console.WriteLine($"{item.FirstName} {item.LastName}");
        }

        StateHasChanged();
    }

    private void FilterCandidatesByLastName()
    {
        if (string.IsNullOrEmpty(_filterLastName))
        {
            _filteredCandidates = _eligibleCandidates;
        }

        _filteredCandidates = _eligibleCandidates.Where(can => can.LastName.Contains(_filterLastName.ToLower())).ToList();
    }

    private void FilterAllFavorites()
    {
        _filterFavorites = !_filterFavorites;
        if (!_filterFavorites)
        {
            _filteredCandidates = _eligibleCandidates;
        }

        _filteredCandidates = _eligibleCandidates.Where(can => can.IsFavorited).ToList();
        StateHasChanged();
    }

    private void ToggleFavoriteList()
    {
        _filterFavorites = !_filterFavorites;
    }

    private void NoFavoriteFilter()
    {
        _filteredCandidates = _eligibleCandidates;
        _filterFavorites = false;
    }

    private void ResetAllFilters()
    {
        _filterFirstName = string.Empty;
        _filterLastName = string.Empty;
        _filterFavorites = false;
        _filteredCandidates = _eligibleCandidates;
    }

}